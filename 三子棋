#include "game.h"
int main()
{
	menu();
	test();
	system("pause");
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define ROW 3
#define COL 3 
void menu();
void test();
void game();
void chessboard(char board[ROW][COL], int row, int col);
void print_chessboard(char board[ROW][COL], int row, int col);
void lnit_board(char board[ROW][COL], int row, int col);
char judgeboard(char board[ROW][COL], int row, int col);

#include "game.h"
void menu()
{
	printf("*****************************\n");
	printf("********** 1.play ***********\n");
	printf("********** 0.quit ***********\n");
	printf("*****************************\n");
}
//初始化函数
void lnit_board(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row	; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}
//打印棋盘函数
void print_board(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
		if (i < 2)
		{
			printf("---|---|---\n");
		}
	}
	printf("\n");
}
//玩家下棋函数
void playboard(char board[ROW][COL],int row, int col)
{
	int m = 0;
	int n = 0;
	printf("玩家走:\n");
	while (1)
	{
		scanf("%d %d", &m, &n);
		if (m >= 1 && m <= row && n >= 1 && n <= col)
		{
			if (board[m - 1][n - 1] == ' ')
			{
				board[m - 1][n - 1] = 'X';
				break;
			}
			else
			{
				printf("该位置已被占用\n");
			}
		}
		else
		{
			printf("非法坐标，请重新输入\n");
		}
	}
}
//电脑下棋函数
void computerboard(char board[ROW][COL], int row, int col)
{
	int m = 0;
	int n = 0;
	printf("电脑走:\n");
	while (1)
	{
		m = rand() % row;
		n = rand() % col;//m和n生成1-3的随机值
		if (board[m][n] == ' ')
		{
			board[m][n] = 'O';
			break;
		}
	}
}
//判断棋盘是否已满
static int  isFull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;
		}
	}
	return 1;
}
//判断输赢函数
char judgeboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
			return board[i][0];
	}
	for (i = 0; i < col; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
			return board[0][i];
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	if (isFull(board, row, col))
	{
		return "balance";          
	}
	return ' ';
}

void game()
{
	int i = 0;
	int determination = 0;
	char board[ROW][COL] = { 0 };
	lnit_board(board, ROW, COL);
	printf("进入游戏\n");
	while (1)
	{
		playboard(board, ROW, COL);
		print_board(board, ROW, COL);
		determination = judgeboard(board, ROW, COL);
		if (determination != ' ')
		{
			break;
		}
		computerboard(board, ROW, COL);
		print_board(board, ROW, COL);
		determination = judgeboard(board, ROW, COL);
		if (determination != ' ')
		{
			break;
		}	
	}
	if (determination == 'X')
	{
		printf("玩家赢\n");
	}
	else if (determination == 'O')
	{
		printf("电脑赢\n");
	}
	else
	{
		printf("平局\n");
	}
}

void test()
{
	int choice = 0;
	scanf("%d", &choice);
	switch (choice)
	{
	case 1:
		game();
		break;
	case 0:
		printf("退出游戏\n");
		break;
	default:
		printf("输入错误,游戏关闭.\n");
	}
}
