import java.util.*;

//扑克牌类
class Card {
    public String suit;//花色
    public String rank;//点数

    public Card(String suit, String rank) {
        this.suit = suit;
        this.rank = rank;
    }

    @Override
    public String toString() {
        return "(" + suit + " " + rank +  ")";
    }
}

public class CardDemo {

    //无对 Zilch 不能排成以上组合的牌，以点数决定大小。
    public static final int Zilch = 1;
    //一对One Pair  两张相同点数的牌。
    public static final int OnePair = 2;
    //两对 Two Pairs  两张相同点数的牌，加另外两张相同点数的牌
    public static final int TwoPairs = 3;
    //三条 ThreeOfAKind  有三张同一点数的牌。
    public static final int ThreeOfAKind = 4;
    //顺子 Straight  五张顺连的牌。
    public static final int Straight = 5;
    //同花 Flush  五张同一花色的牌。
    public static final int Flush = 6;
    //满堂红 Fullhouse  三张同一点数的牌，加一对其他点数的牌
    public static final int FullHouse = 7;
    //四条 FourOfAKind  有四张同一点数的牌。
    public static final int FourOfAKind = 8;
    //同花顺 Straight Flush  同一花色，顺序的牌。
    public static final int straightFlush = 9;
    //同花大顺 Royal Flush 最高为Ace（一点）的同花顺
    public static final int royalFlush = 10;

    //黑桃>红桃>草花>方块
    public static final String[] SUITS = {"♠", "♥", "♣", "♦"};

    public static List<Card> newPoker() {
        List<Card> poker = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            for (int j = 2; j <= 10; j++) {
                poker.add(new Card(SUITS[i],j + ""));
            }
            poker.add(new Card(SUITS[i] , "J"));
            poker.add(new Card(SUITS[i] , "Q"));
            poker.add(new Card(SUITS[i] , "K"));
            poker.add(new Card(SUITS[i] , "A"));
        }
        return poker;
    }

    public static void main(String[] args) {
        //创建一副牌

        System.out.println("创建一副牌");
        List<Card> poker = newPoker();
        //洗牌
        Collections.shuffle(poker);
        System.out.println(poker);
        //发牌
        List<List<Card>> players = new ArrayList<>();
        //新增三个列表 表示三个玩家的三副牌
        players.add(new ArrayList<Card>());
        players.add(new ArrayList<Card>());

        //依次发牌
        for (int cardIndex = 0; cardIndex < 5; cardIndex++) {
            for (int playerIndex = 0; playerIndex < 2; playerIndex++) {
                //players.get(playerIndex).add(poker.remove(0));
                //get 一般表示读取数据， 但也可以借助 get 来修改数据
                List<Card> playerCards = players.get(playerIndex);//先得到一个玩家数组
                Card curCard = poker.remove(0);//拿到这副牌最上面的一张
                playerCards.add(curCard);//将拿到的牌给到玩家手中
            }
        }

        //新建两个玩家的点数表和花色表
        int[] RankOfPlayer1 = getRankArray(players.get(0));
        int[] SuitOfPlayer1 = getSuitArray(players.get(0));
        int[] RankOfPlayer2 = getRankArray(players.get(1));
        int[] SuitOfPlayer2 = getSuitArray(players.get(1));

        int typeOfPlayer1 = pokerType(RankOfPlayer1, SuitOfPlayer1);
        int typeOfPlayer2 = pokerType(RankOfPlayer2, SuitOfPlayer2);
        
                //展示两个玩家被发到的扑克牌
        System.out.println("玩家1：");
        System.out.println(players.get(0));
        printType(typeOfPlayer1);
        System.out.println("玩家2：");
        System.out.println(players.get(1));
        printType(typeOfPlayer2);

        double score1 = getScore(typeOfPlayer1, RankOfPlayer1, SuitOfPlayer1);
        double score2 = getScore(typeOfPlayer2, RankOfPlayer2, SuitOfPlayer2);
        System.out.println(score1);
        System.out.println(score2);

        compa
